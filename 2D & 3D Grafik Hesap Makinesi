<!DOCTYPE html>
<html lang="tr-TR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D ve 3D Grafik Çizim</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
        }
        .calculator {
            background-color: #e0f7fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            box-sizing: border-box;
            text-align: center;
        }
        .display {
            width: 100%;
            height: 50px;
            background-color: #0288d1;
            color: #fff;
            text-align: right;
            padding: 10px;
            font-size: 24px;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        .buttons {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .buttons button {
            padding: 10px;
            font-size: 18px;
            border: none;
            border-radius: 5px;
            background-color: #b3e5fc;
            cursor: pointer;
            transition: background-color 0.3s;
            flex: 1;
            margin: 0 5px;
        }
        .buttons button.active {
            background-color: #00ff00;
        }
        .buttons button:hover {
            background-color: #81d4fa;
        }
        #graph {
            margin-top: 10px;
            width: 100%;
            height: 400px;
            background-color: #fff;
            border-radius: 12px;
            position: relative;
        }
        .axis {
            stroke-width: 2;
        }
        .axis.x {
            stroke: #ff0000;
        }
        .axis.y {
            stroke: #00ff00;
        }
        .axis.z {
            stroke: #0000ff;
        }
        .graph-line {
            stroke: #ff0000;
            stroke-width: 2;
        }
        @media (max-width: 600px) {
            .buttons button {
                padding: 15px;
                font-size: 16px;
            }
            .display {
                height: 40px;
                font-size: 20px;
            }
        }
        .operation-button {
            background-color: #0288d1;
            color: #fff;
        }
        .clear-button {
            background-color: #d32f2f;
            color: #fff;
        }
        .equals-button {
            background-color: blue;
            color: white;
            transition: .6s linear; 
            margin-top: 5px;
        }
        .equals-button:hover {
            background-color: magenta;
            color: black;
            border-radius: 12px;
            margin-top: 5px;
        }
        #function-input {
            width: 97%; 
        }
    </style>
</head>
<body>
    <div class="calculator">
        <h3>Bu Grafik Hesap Makinesi, Ercan Işık tarafından yapay zekaya yaptırılmıştır.</h3>
        <div class="buttons">
            <button id="2d-button" onclick="setMode('2d')">2D Modu</button>
            <button id="3d-button" onclick="setMode('3d')">3D Modu</button>
        </div>
        <input type="text" id="function-input" placeholder="y=? ne olsun? y=x^6+8 gibi..">
        <button class="equals-button" onclick="drawGraph()">Grafik Çiz</button>
        <div id="graph"></div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.4.4/math.min.js"></script>
    <script>
        let currentMode = '2d';

        function setMode(mode) {
            currentMode = mode;
            document.getElementById('2d-button').classList.toggle('active', mode === '2d');
            document.getElementById('3d-button').classList.toggle('active', mode === '3d');
        }

        function drawGraph() {
            const input = document.getElementById('function-input').value;
            const graphDiv = document.getElementById('graph');
            graphDiv.innerHTML = '';

            if (currentMode === '2d') {
                draw2DGraph(input, graphDiv);
            } else {
                draw3DGraph(input, graphDiv);
            }
        }

        function draw2DGraph(input, graphDiv) {
            const canvas = document.createElement('canvas');
            canvas.width = graphDiv.clientWidth;
            canvas.height = graphDiv.clientHeight;
            graphDiv.appendChild(canvas);
            const ctx = canvas.getContext('2d');

            // Koordinat sistemi çizimi
            ctx.strokeStyle = '#000000';
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.moveTo(0, canvas.height / 2);
            ctx.lineTo(canvas.width, canvas.height / 2);
            ctx.stroke();

            const expr = math.compile(input);
            ctx.strokeStyle = '#ff0000';
            ctx.beginPath();
            for (let x = -10; x <= 10; x += 0.1) {
                const y = expr.evaluate({ x: x });
                const canvasX = (x + 10) * (canvas.width / 20);
                const canvasY = canvas.height - ((y + 10) * (canvas.height / 20));
                if (x === -10) {
                    ctx.moveTo(canvasX, canvasY);
                } else {
                    ctx.lineTo(canvasX, canvasY);
                }
            }
            ctx.stroke();
        }

        function draw3DGraph(input, graphDiv) {
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, graphDiv.clientWidth / graphDiv.clientHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer();
            renderer.setSize(graphDiv.clientWidth, graphDiv.clientHeight);
            graphDiv.appendChild(renderer.domElement);

            // Koordinat sistemi çizimi
            const axesHelper = new THREE.AxesHelper(20);
            scene.add(axesHelper);

            const geometry = new THREE.BufferGeometry();
            const vertices = [];

            const expr = math.compile(input);
            for (let x = -10; x <= 10; x += 0.5) {
                for (let y = -10; y <= 10; y += 0.5) {
                    const z = expr.evaluate({ x: x, y: y });
                    vertices.push(x, y, z);
                }
            }

            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            const material = new THREE.PointsMaterial({ color: 0xff0000 });
            const points = new THREE.Points(geometry, material);
            scene.add(points);

            // Eksenler için sayılar ekleme
            const addAxisLabels = (axis, size) => {
                const divisions = 10;
                for (let i = -size; i <= size; i += size / divisions) {
                    const label = document.createElement('div');
                    label.style.position = 'absolute';
                    label.style.color = 'black';
                    label.innerHTML = i.toString();
                    label.style.transform = `translate(-50%, -50%)`;
                    if (axis === 'x') {
                        label.style.left = `${(i + size) * (graphDiv.clientWidth / (2 * size))}px`;
                        label.style.bottom = '0px';
                    } else if (axis === 'y') {
                        label.style.left = '0px';
                        label.style.bottom = `${(i + size) * (graphDiv.clientHeight / (2 * size))}px`;
                    } else if (axis === 'z') {
                        label.style.left = `${(i + size) * (graphDiv.clientWidth / (2 * size))}px`;
                        label.style.bottom = `${(i + size) * (graphDiv.clientHeight / (2 * size))}px`;
                    }
                    graphDiv.appendChild(label);
                }
            };

            addAxisLabels('x', 10);
            addAxisLabels('y', 10);
            addAxisLabels('z', 10);

            camera.position.z = 50;

            function animate() {
                requestAnimationFrame(animate);
                points.rotation.x += 0.01;
                points.rotation.y += 0.01;
                renderer.render(scene, camera);
            }
            // Eksenler için sayılar ekleme
            const addAxisLabels = (axis, size) => {
                const divisions = 10;
                for (let i = -size; i <= size; i += size / divisions) {
                    const label = document.createElement('div');
                    label.style.position = 'absolute';
                    label.style.color = 'black';
                    label.innerHTML = i.toString();
                    label.style.transform = `translate(-50%, -50%)`;
                    if (axis === 'x') {
                        label.style.left = `${(i + size) * (graphDiv.clientWidth / (2 * size))}px`;
                        label.style.bottom = '0px';
                    } else if (axis === 'y') {
                        label.style.left = '0px';
                        label.style.bottom = `${(i + size) * (graphDiv.clientHeight / (2 * size))}px`;
                    } else if (axis === 'z') {
                        label.style.left = `${(i + size) * (graphDiv.clientWidth / (2 * size))}px`;
                        label.style.bottom = `${(i + size) * (graphDiv.clientHeight / (2 * size))}px`;
                    }
                    graphDiv.appendChild(label);
                }
            };

            addAxisLabels('x', 10);
            addAxisLabels('y', 10);
            addAxisLabels('z', 10);

            camera.position.z = 50;

            function animate() {
                requestAnimationFrame(animate);
                points.rotation.x += 0.01;
                points.rotation.y += 0.01;
                renderer.render(scene, camera);
            }
            animate();
        }
    </script>
</body>
</html>
